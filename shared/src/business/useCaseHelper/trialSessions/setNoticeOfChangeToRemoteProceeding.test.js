const {
  applicationContext,
} = require('../../test/createTestApplicationContext');
const {
  CASE_STATUS_TYPES,
  SYSTEM_GENERATED_DOCUMENT_TYPES,
} = require('../../entities/EntityConstants');
const {
  MOCK_TRIAL_INPERSON,
  MOCK_TRIAL_REMOTE,
} = require('../../../test/mockTrial');
const {
  setNoticeOfChangeToRemoteProceeding,
} = require('./setNoticeOfChangeToRemoteProceeding');
const { Case } = require('../../entities/cases/Case');
const { getFakeFile } = require('../../test/getFakeFile');
const { MOCK_CASE } = require('../../../test/mockCase');

const mockDocumentId = '98c6b1c8-1eed-44b6-932a-967af060597a';
const trialSessionId = '76a5b1c8-1eed-44b6-932a-967af060597a';
const userId = '85a5b1c8-1eed-44b6-932a-967af060597a';

const inPersonTrialSession = { ...MOCK_TRIAL_INPERSON, trialSessionId };
const remoteTrialSession = { ...MOCK_TRIAL_REMOTE, trialSessionId };

const mockOpenCase = new Case(
  {
    ...MOCK_CASE,
    trialDate: '2019-03-01T21:42:29.073Z',
    trialSessionId,
  },
  { applicationContext },
);
const mockClosedCase = new Case(
  {
    ...MOCK_CASE,
    closedDate: '2020-03-01T21:42:29.073Z',
    docketNumber: '999-99',
    status: CASE_STATUS_TYPES.closed,
    trialDate: '2019-03-01T21:42:29.073Z',
    trialSessionId,
  },
  { applicationContext },
);

describe('setNoticeOfChangeToRemoteProceeding', () => {
  beforeEach(() => {
    applicationContext
      .getUseCases()
      .generateNoticeOfChangeToRemoteProceedingInteractor.mockReturnValue(
        getFakeFile,
      );

    applicationContext.getUniqueId.mockReturnValue(mockDocumentId);
  });

  it('should generate a NORP when the proceeding type changes from in person to remote and the case status is not closed', async () => {
    await setNoticeOfChangeToRemoteProceeding(applicationContext, {
      caseEntity: mockOpenCase,
      currentTrialSession: inPersonTrialSession,
      newTrialSessionEntity: remoteTrialSession,
      userId,
    });

    expect(
      applicationContext.getUseCases()
        .generateNoticeOfChangeToRemoteProceedingInteractor.mock.calls[0][1],
    ).toMatchObject({
      docketNumber: mockOpenCase.docketNumber,
      trialSessionInformation: {
        joinPhoneNumber: '0987654321',
        judgeName: 'Chief Judge',
        meetingId: '1234567890',
        password: 'abcdefg',
        startDate: '2025-12-01T00:00:00.000Z',
        startTime: undefined,
        trialLocation: 'Birmingham, Alabama',
      },
    });
  });

  it('should save the generated NORP to persistence', async () => {
    await setNoticeOfChangeToRemoteProceeding(applicationContext, {
      caseEntity: mockOpenCase,
      currentTrialSession: inPersonTrialSession,
      newTrialSessionEntity: remoteTrialSession,
      userId,
    });

    expect(
      applicationContext.getPersistenceGateway().saveDocumentFromLambda.mock
        .calls[0][0],
    ).toMatchObject({
      document: getFakeFile,
      key: mockDocumentId,
    });
  });

  it('create and serve the NORP docket entry on the case', async () => {
    await setNoticeOfChangeToRemoteProceeding(applicationContext, {
      caseEntity: mockOpenCase,
      currentTrialSession: inPersonTrialSession,
      newTrialSessionEntity: remoteTrialSession,
      userId,
    });

    const norpDocketEntry = applicationContext
      .getUseCaseHelpers()
      .serveDocumentAndGetPaperServicePdf.mock.calls[0][0].caseEntity.docketEntries.find(
        d =>
          d.eventCode ===
          SYSTEM_GENERATED_DOCUMENT_TYPES.noticeOfChangeToRemoteProceeding
            .eventCode,
      );

    expect(norpDocketEntry).toMatchObject({
      docketEntryId: mockDocumentId,
      docketNumber: '101-18',
      documentTitle: 'Notice of Change to Remote Proceeding',
      eventCode: 'NORP',
      isAutoGenerated: true,
      isFileAttached: true,
      servedParties: [
        {
          email: 'petitioner@example.com',
          name: 'Test Petitioner',
        },
      ],
      servedPartiesCode: 'B',
    });
  });

  it('should not do anything when the case status is closed', async () => {
    await setNoticeOfChangeToRemoteProceeding(applicationContext, {
      caseEntity: mockClosedCase,
      currentTrialSession: inPersonTrialSession,
      newTrialSessionEntity: remoteTrialSession,
      userId,
    });

    expect(
      applicationContext.getUseCases()
        .generateNoticeOfChangeToRemoteProceedingInteractor,
    ).not.toHaveBeenCalled();
    expect(
      applicationContext.getPersistenceGateway().saveDocumentFromLambda,
    ).not.toHaveBeenCalled();
    expect(
      applicationContext.getUseCaseHelpers().serveDocumentAndGetPaperServicePdf,
    ).not.toHaveBeenCalled();
  });

  it('should not do anything when the case status is open but the trial session proceeding type has not changed', async () => {
    await setNoticeOfChangeToRemoteProceeding(applicationContext, {
      caseEntity: mockOpenCase,
      currentTrialSession: inPersonTrialSession,
      newTrialSessionEntity: inPersonTrialSession,
      userId,
    });

    expect(
      applicationContext.getUseCases()
        .generateNoticeOfChangeToRemoteProceedingInteractor,
    ).not.toHaveBeenCalled();
    expect(
      applicationContext.getPersistenceGateway().saveDocumentFromLambda,
    ).not.toHaveBeenCalled();
    expect(
      applicationContext.getUseCaseHelpers().serveDocumentAndGetPaperServicePdf,
    ).not.toHaveBeenCalled();
  });
});
