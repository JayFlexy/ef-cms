const { CASE_STATUS_TYPES } = require('../../entities/EntityConstants');
const { getJudgeWithTitle } = require('../../utilities/getJudgeWithTitle');

// const serveNoticesForCase = async (
//   applicationContext,
//   {
//     caseEntity,
//     newPdfDoc,
//     noticeDocketEntryEntity,
//     noticeDocumentPdfData,
//     PDFDocument,
//     servedParties,
//   },
// ) => {
//   await applicationContext.getUseCaseHelpers().sendServedPartiesEmails({
//     applicationContext,
//     caseEntity,
//     docketEntryId: noticeDocketEntryEntity.docketEntryId,
//     servedParties,
//   });

//   if (servedParties.paper.length > 0) {
//     const noticeDocumentPdf = await PDFDocument.load(noticeDocumentPdfData);

//     await applicationContext
//       .getUseCaseHelpers()
//       .appendPaperServiceAddressPageToPdf({
//         applicationContext,
//         caseEntity,
//         newPdfDoc,
//         noticeDoc: noticeDocumentPdf,
//         servedParties,
//       });
//   }
// };

/**
 * setNoticeOfChangeOfTrialJudge
 *
fixme
 */
exports.setNoticeOfChangeOfTrialJudge = async (
  applicationContext,
  {
    caseEntity,
    currentTrialSession,
    newPdfDoc,
    newTrialSessionEntity,
    PDFDocument,
    userId,
  },
) => {
  const shouldIssueNoticeOfChangeOfTrialJudge =
    currentTrialSession.isCalendared &&
    currentTrialSession.judge?.userId !== newTrialSessionEntity.judge?.userId &&
    caseEntity.status !== CASE_STATUS_TYPES.closed;

  if (shouldIssueNoticeOfChangeOfTrialJudge) {
    const priorJudgeTitleWithFullName = await getJudgeWithTitle({
      applicationContext,
      judgeUserName: currentTrialSession.judgeName,
      shouldReturnFullName: true,
    });

    const updatedJudgeTitleWithFullName = await getJudgeWithTitle({
      applicationContext,
      judgeUserName: newTrialSessionEntity.judgeName,
      shouldReturnFullName: true,
    });

    const trialSessionInformation = {
      caseProcedureType: caseEntity.procedureType,
      caseType: caseEntity.caseType,
      chambersPhoneNumber: newTrialSessionEntity.chambersPhoneNumber,
      docketNumber: caseEntity.docketNumber,
      priorJudgeTitleWithFullName,
      proceedingType: newTrialSessionEntity.proceedingType,
      startDate: newTrialSessionEntity.startDate,
      trialLocation: newTrialSessionEntity.trialLocation,
      updatedJudgeTitleWithFullName,
    };

    const notice = await applicationContext
      .getUseCases()
      .generateNoticeOfChangeOfTrialJudgeInteractor(applicationContext, {
        trialSessionInformation,
      });

    // const docketEntryId = applicationContext.getUniqueId();

    // await applicationContext.getPersistenceGateway().saveDocumentFromLambda({
    //   applicationContext,
    //   document: notice,
    //   key: docketEntryId,
    // });

    // const noticeOfChangeToRemoteProceedingDocketEntry = new DocketEntry(
    //   {
    //     date: newTrialSessionEntity.startDate,
    //     docketEntryId,
    //     documentTitle:
    //       SYSTEM_GENERATED_DOCUMENT_TYPES.noticeOfChangeToRemoteProceeding
    //         .documentTitle,
    //     documentType:
    //       SYSTEM_GENERATED_DOCUMENT_TYPES.noticeOfChangeToRemoteProceeding
    //         .documentType,
    //     eventCode:
    //       SYSTEM_GENERATED_DOCUMENT_TYPES.noticeOfChangeToRemoteProceeding
    //         .eventCode,
    //     isAutoGenerated: true,
    //     isFileAttached: true,
    //     isOnDocketRecord: true,
    //     processingStatus: DOCUMENT_PROCESSING_STATUS_OPTIONS.COMPLETE,
    //     signedAt: applicationContext.getUtilities().createISODateString(),
    //     trialLocation: newTrialSessionEntity.trialLocation,
    //     userId,
    //   },
    //   { applicationContext },
    // );

    // noticeOfChangeToRemoteProceedingDocketEntry.numberOfPages =
    //   await applicationContext.getUseCaseHelpers().countPagesInDocument({
    //     applicationContext,
    //     docketEntryId:
    //       noticeOfChangeToRemoteProceedingDocketEntry.docketEntryId,
    //   });

    // caseEntity.addDocketEntry(noticeOfChangeToRemoteProceedingDocketEntry);
    // const servedParties = aggregatePartiesForService(caseEntity);

    // noticeOfChangeToRemoteProceedingDocketEntry.setAsServed(servedParties.all);

    // await serveNoticesForCase(applicationContext, {
    //   PDFDocument,
    //   caseEntity,
    //   newPdfDoc,
    //   noticeDocketEntryEntity: noticeOfChangeToRemoteProceedingDocketEntry,
    //   noticeDocumentPdfData: notice,
    //   servedParties,
    // });
  }
};
