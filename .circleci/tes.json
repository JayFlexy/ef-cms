{
  "version": 2.1,
  "jobs": {
    "build-client-integration": {
      "docker": [
        {
          "image": "$AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/ef-cms-us-east-1:latest",
          "aws_auth": {
            "aws_access_key_id": "$AWS_ACCESS_KEY_ID",
            "aws_secret_access_key": "$AWS_SECRET_ACCESS_KEY"
          }
        },
        {
          "image": "amazon/dynamodb-local",
          "command": [
            "-jar",
            "DynamoDBLocal.jar",
            "-inMemory"
          ],
          "environment": {
            "discovery.type": "single-node",
            "JAVA_OPTS": "-Xms512m -Xmx512m"
          }
        },
        {
          "image": "elastic/elasticsearch:7.8.1",
          "environment": {
            "discovery.type": "single-node",
            "ES_JAVA_OPTS": "-Xms512m -Xmx512m"
          }
        }
      ],
      "resource_class": "large",
      "parallelism": 8,
      "steps": [
        {
          "restore_cache": {
            "name": "Source - Restoring Cache",
            "keys": [
              "source-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}",
              "source-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-",
              "source-{{ .Environment.CACHE_VERSION }}-"
            ]
          }
        },
        "checkout",
        {
          "save_cache": {
            "name": "Source - Saving Cache",
            "key": "deps-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}",
            "paths": [
              ".git"
            ]
          }
        },
        {
          "run": {
            "name": "NPM - Install",
            "command": "npm set progress=false\nnpm ci\nnpm rebuild\n"
          }
        },
        {
          "run": {
            "name": "Create web-client Artifacts Directory",
            "command": "mkdir /tmp/web-client/"
          }
        },
        {
          "run": {
            "name": "Web Client - Integration Test",
            "command": "TEMP_DOCUMENTS_BUCKET_NAME=noop-temp-documents-local-us-east-1 \\\n QUARANTINE_BUCKET_NAME=noop-quarantine-local-us-east-1 \\\n DOCUMENTS_BUCKET_NAME=noop-documents-local-us-east-1 \\\n S3_ENDPOINT=http://localhost:9000 \\\n SKIP_CACHE_INVALIDATION=true \\\n AWS_ACCESS_KEY_ID=S3RVER \\\n AWS_SECRET_ACCESS_KEY=S3RVER \\\n npm run start:api:ci > /tmp/web-client/server-output.txt &\n./wait-until.sh http://localhost:4000/api/swagger\nTESTFILES=$(circleci tests glob \"web-client/integration-tests/*.test.js\" \"web-client/integration-tests-public/*.test.js\" | circleci tests split --split-by=timings)\nCI=true NO_SCANNER=true \\\n SKIP_VIRUS_SCAN=true \\\n AWS_ACCESS_KEY_ID=S3RVER \\\n AWS_SECRET_ACCESS_KEY=S3RVER \\\n TEMP_DOCUMENTS_BUCKET_NAME=noop-temp-documents-local-us-east-1 \\\n QUARANTINE_BUCKET_NAME=noop-quarantine-local-us-east-1 \\\n DOCUMENTS_BUCKET_NAME=noop-documents-local-us-east-1 \\\n S3_ENDPOINT=http://localhost:9000 \\\n npx jest --coverageDirectory=./coverage-integration-${CIRCLE_NODE_INDEX} --runInBand --config web-client/jest-integration.config.js ${TESTFILES} --no-install\n"
          }
        },
        {
          "store_artifacts": {
            "path": "/tmp/web-client"
          }
        },
        {
          "persist_to_workspace": {
            "root": "~/",
            "paths": [
              "project/web-client",
              "project/web-client/coverage-integration-*"
            ]
          }
        }
      ]
    },
    "e2e-pa11y": {
      "docker": [
        {
          "image": "$AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/ef-cms-us-east-1:latest",
          "aws_auth": {
            "aws_access_key_id": "$AWS_ACCESS_KEY_ID",
            "aws_secret_access_key": "$AWS_SECRET_ACCESS_KEY"
          }
        },
        {
          "image": "amazon/dynamodb-local",
          "command": [
            "-jar",
            "DynamoDBLocal.jar",
            "-inMemory"
          ],
          "environment": {
            "discovery.type": "single-node",
            "JAVA_OPTS": "-Xms512m -Xmx512m"
          }
        },
        {
          "image": "elastic/elasticsearch:7.8.1",
          "environment": {
            "discovery.type": "single-node",
            "ES_JAVA_OPTS": "-Xms512m -Xmx512m"
          }
        }
      ],
      "resource_class": "xlarge",
      "steps": [
        {
          "restore_cache": {
            "name": "Source - Restoring Cache",
            "keys": [
              "source-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}",
              "source-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-",
              "source-{{ .Environment.CACHE_VERSION }}-"
            ]
          }
        },
        "checkout",
        {
          "save_cache": {
            "name": "Source - Saving Cache",
            "key": "deps-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}",
            "paths": [
              ".git"
            ]
          }
        },
        {
          "run": {
            "name": "NPM - Install",
            "command": "npm set progress=false\nnpm ci\nnpm rebuild\n"
          }
        },
        {
          "run": {
            "name": "Create Pa11y Artifacts Directory",
            "command": "mkdir /tmp/pa11y"
          }
        },
        {
          "run": {
            "name": "Pa11y",
            "environment": {
              "SKIP_CACHE_INVALIDATION": true,
              "TEMP_DOCUMENTS_BUCKET_NAME": "noop-temp-documents-local-us-east-1",
              "QUARANTINE_BUCKET_NAME": "noop-quarantine-local-us-east-1",
              "DOCUMENTS_BUCKET_NAME": "noop-documents-local-us-east-1",
              "S3_ENDPOINT": "http://localhost:9000",
              "MASTER_DYNAMODB_ENDPOINT": "http://localhost:8000",
              "AWS_ACCESS_KEY_ID": "S3RVER",
              "AWS_SECRET_ACCESS_KEY": "S3RVER"
            },
            "command": "npm run build:all\nnpx --no-install run-p start:api:ci start:client:ci >> /tmp/pa11y/pa11y-server.txt &\n./wait-until-services.sh\n./wait-until.sh http://localhost:4000/api/swagger\nsleep 10\nnpm run test:pa11y:1 --node-flags --max-old-space-size=1024\nnpm run test:pa11y:2 --node-flags --max-old-space-size=1024\nnpm run test:pa11y:3 --node-flags --max-old-space-size=1024\n"
          }
        },
        {
          "store_artifacts": {
            "path": "/root/project/web-client/pa11y/pa11y-screenshots"
          }
        },
        {
          "store_artifacts": {
            "path": "/tmp/pa11y"
          }
        }
      ]
    },
    "e2e-pa11y-public": {
      "docker": [
        {
          "image": "$AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/ef-cms-us-east-1:latest",
          "aws_auth": {
            "aws_access_key_id": "$AWS_ACCESS_KEY_ID",
            "aws_secret_access_key": "$AWS_SECRET_ACCESS_KEY"
          }
        },
        {
          "image": "amazon/dynamodb-local",
          "command": [
            "-jar",
            "DynamoDBLocal.jar",
            "-inMemory"
          ],
          "environment": {
            "discovery.type": "single-node",
            "JAVA_OPTS": "-Xms512m -Xmx512m"
          }
        },
        {
          "image": "elastic/elasticsearch:7.8.1",
          "environment": {
            "discovery.type": "single-node",
            "ES_JAVA_OPTS": "-Xms512m -Xmx512m"
          }
        }
      ],
      "resource_class": "large",
      "steps": [
        {
          "restore_cache": {
            "name": "Source - Restoring Cache",
            "keys": [
              "source-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}",
              "source-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-",
              "source-{{ .Environment.CACHE_VERSION }}-"
            ]
          }
        },
        "checkout",
        {
          "save_cache": {
            "name": "Source - Saving Cache",
            "key": "deps-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}",
            "paths": [
              ".git"
            ]
          }
        },
        {
          "run": {
            "name": "NPM - Install",
            "command": "npm set progress=false\nnpm ci\nnpm rebuild\n"
          }
        },
        {
          "run": {
            "name": "Create Pa11y Artifacts Directory",
            "command": "mkdir /tmp/pa11y"
          }
        },
        {
          "run": {
            "name": "Pa11y",
            "environment": {
              "SKIP_CACHE_INVALIDATION": true,
              "TEMP_DOCUMENTS_BUCKET_NAME": "noop-temp-documents-local-us-east-1",
              "QUARANTINE_BUCKET_NAME": "noop-quarantine-local-us-east-1",
              "DOCUMENTS_BUCKET_NAME": "noop-documents-local-us-east-1",
              "S3_ENDPOINT": "http://localhost:9000",
              "MASTER_DYNAMODB_ENDPOINT": "http://localhost:8000",
              "AWS_ACCESS_KEY_ID": "S3RVER",
              "AWS_SECRET_ACCESS_KEY": "S3RVER"
            },
            "command": "npm run build:all\nnpx --no-install run-p start:api:ci start:public:ci >> /tmp/pa11y/pa11y-server.txt &\n./wait-until-services.sh\n./wait-until.sh http://localhost:5000/ 404\nsleep 10\nnpm run test:pa11y:public --node-flags --max-old-space-size=1024\n"
          }
        },
        {
          "store_artifacts": {
            "path": "/root/project/web-client/pa11y/pa11y-screenshots"
          }
        },
        {
          "store_artifacts": {
            "path": "/tmp/pa11y"
          }
        }
      ]
    },
    "e2e-cypress": {
      "docker": [
        {
          "image": "$AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/ef-cms-us-east-1:latest",
          "aws_auth": {
            "aws_access_key_id": "$AWS_ACCESS_KEY_ID",
            "aws_secret_access_key": "$AWS_SECRET_ACCESS_KEY"
          }
        },
        {
          "image": "amazon/dynamodb-local",
          "command": [
            "-jar",
            "DynamoDBLocal.jar",
            "-inMemory"
          ],
          "environment": {
            "discovery.type": "single-node",
            "JAVA_OPTS": "-Xms512m -Xmx512m"
          }
        },
        {
          "image": "elastic/elasticsearch:7.8.1",
          "environment": {
            "discovery.type": "single-node",
            "ES_JAVA_OPTS": "-Xms512m -Xmx512m"
          }
        }
      ],
      "resource_class": "xlarge",
      "steps": [
        {
          "restore_cache": {
            "name": "Source - Restoring Cache",
            "keys": [
              "source-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}",
              "source-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-",
              "source-{{ .Environment.CACHE_VERSION }}-"
            ]
          }
        },
        "checkout",
        {
          "save_cache": {
            "name": "Source - Saving Cache",
            "key": "deps-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}",
            "paths": [
              ".git"
            ]
          }
        },
        {
          "run": {
            "name": "NPM - Install",
            "command": "npm set progress=false\nnpm ci\nnpm rebuild\n"
          }
        },
        {
          "run": {
            "name": "Create Cypress Artifacts Directory",
            "command": "mkdir /tmp/cypress"
          }
        },
        {
          "run": {
            "name": "Cypress",
            "environment": {
              "SKIP_CACHE_INVALIDATION": true,
              "TEMP_DOCUMENTS_BUCKET_NAME": "noop-temp-documents-local-us-east-1",
              "QUARANTINE_BUCKET_NAME": "noop-quarantine-local-us-east-1",
              "DOCUMENTS_BUCKET_NAME": "noop-documents-local-us-east-1",
              "S3_ENDPOINT": "http://localhost:9000",
              "MASTER_DYNAMODB_ENDPOINT": "http://localhost:8000",
              "AWS_ACCESS_KEY_ID": "S3RVER",
              "AWS_SECRET_ACCESS_KEY": "S3RVER"
            },
            "command": "npm run build:all &&\nCYPRESS_VERSION=`./node_modules/.bin/cypress --version | awk -F' ' '{print $4; exit}'`\nif [ ! -e \"/root/.cache/Cypress/${CYPRESS_VERSION}/Cypress/Cypress\" ]; then\n  ./node_modules/.bin/cypress install\nfi\nnpx --no-install run-p start:api:ci start:client:ci > /tmp/cypress/cypress-output.txt &\n./wait-until-services.sh\n./wait-until.sh http://localhost:4000/api/swagger\nsleep 5\nnpm run cypress\n"
          }
        },
        {
          "store_artifacts": {
            "path": "/root/project/cypress/videos/"
          }
        },
        {
          "store_artifacts": {
            "path": "/tmp/cypress"
          }
        }
      ]
    },
    "e2e-cypress-smoketests-local": {
      "docker": [
        {
          "image": "$AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/ef-cms-us-east-1:latest",
          "aws_auth": {
            "aws_access_key_id": "$AWS_ACCESS_KEY_ID",
            "aws_secret_access_key": "$AWS_SECRET_ACCESS_KEY"
          }
        },
        {
          "image": "amazon/dynamodb-local",
          "command": [
            "-jar",
            "DynamoDBLocal.jar",
            "-inMemory"
          ],
          "environment": {
            "discovery.type": "single-node",
            "JAVA_OPTS": "-Xms512m -Xmx512m"
          }
        },
        {
          "image": "elastic/elasticsearch:7.8.1",
          "environment": {
            "discovery.type": "single-node",
            "ES_JAVA_OPTS": "-Xms512m -Xmx512m"
          }
        }
      ],
      "resource_class": "xlarge",
      "steps": [
        {
          "restore_cache": {
            "name": "Source - Restoring Cache",
            "keys": [
              "source-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}",
              "source-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-",
              "source-{{ .Environment.CACHE_VERSION }}-"
            ]
          }
        },
        "checkout",
        {
          "save_cache": {
            "name": "Source - Saving Cache",
            "key": "deps-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}",
            "paths": [
              ".git"
            ]
          }
        },
        {
          "run": {
            "name": "NPM - Install",
            "command": "npm set progress=false\nnpm ci\nnpm rebuild\n"
          }
        },
        {
          "run": {
            "name": "Create Cypress Artifacts Directory",
            "command": "mkdir /tmp/cypress"
          }
        },
        {
          "run": {
            "name": "Cypress",
            "environment": {
              "SKIP_CACHE_INVALIDATION": true,
              "TEMP_DOCUMENTS_BUCKET_NAME": "noop-temp-documents-local-us-east-1",
              "QUARANTINE_BUCKET_NAME": "noop-quarantine-local-us-east-1",
              "DOCUMENTS_BUCKET_NAME": "noop-documents-local-us-east-1",
              "S3_ENDPOINT": "http://localhost:9000",
              "MASTER_DYNAMODB_ENDPOINT": "http://localhost:8000",
              "AWS_ACCESS_KEY_ID": "S3RVER",
              "AWS_SECRET_ACCESS_KEY": "S3RVER"
            },
            "command": "npm run build:all &&\nCYPRESS_VERSION=`./node_modules/.bin/cypress --version | awk -F' ' '{print $4; exit}'`\nif [ ! -e \"/root/.cache/Cypress/${CYPRESS_VERSION}/Cypress/Cypress\" ]; then\n  ./node_modules/.bin/cypress install\nfi\nnpx --no-install run-p start:api:ci start:client:ci > /tmp/cypress/cypress-output.txt &\n./wait-until-services.sh\n./wait-until.sh http://localhost:4000/api/swagger\nsleep 5\nnpm run cypress:smoketests:local\n"
          }
        },
        {
          "store_artifacts": {
            "path": "/root/project/cypress-smoketests/videos/"
          }
        },
        {
          "store_artifacts": {
            "path": "/tmp/cypress"
          }
        }
      ]
    },
    "e2e-cypress-public": {
      "docker": [
        {
          "image": "$AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/ef-cms-us-east-1:latest",
          "aws_auth": {
            "aws_access_key_id": "$AWS_ACCESS_KEY_ID",
            "aws_secret_access_key": "$AWS_SECRET_ACCESS_KEY"
          }
        },
        {
          "image": "amazon/dynamodb-local",
          "command": [
            "-jar",
            "DynamoDBLocal.jar",
            "-inMemory"
          ],
          "environment": {
            "discovery.type": "single-node",
            "JAVA_OPTS": "-Xms512m -Xmx512m"
          }
        },
        {
          "image": "elastic/elasticsearch:7.8.1",
          "environment": {
            "discovery.type": "single-node",
            "ES_JAVA_OPTS": "-Xms512m -Xmx512m"
          }
        }
      ],
      "resource_class": "large",
      "steps": [
        {
          "restore_cache": {
            "name": "Source - Restoring Cache",
            "keys": [
              "source-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}",
              "source-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-",
              "source-{{ .Environment.CACHE_VERSION }}-"
            ]
          }
        },
        "checkout",
        {
          "save_cache": {
            "name": "Source - Saving Cache",
            "key": "deps-{{ .Environment.CACHE_VERSION }}-{{ .Branch }}-{{ .Revision }}",
            "paths": [
              ".git"
            ]
          }
        },
        {
          "run": {
            "name": "NPM - Install",
            "command": "npm set progress=false\nnpm ci\nnpm rebuild\n"
          }
        },
        {
          "run": {
            "name": "Create Cypress Artifacts Directory",
            "command": "mkdir /tmp/cypress"
          }
        },
        {
          "run": {
            "name": "Cypress",
            "environment": {
              "SKIP_CACHE_INVALIDATION": true,
              "TEMP_DOCUMENTS_BUCKET_NAME": "noop-temp-documents-local-us-east-1",
              "QUARANTINE_BUCKET_NAME": "noop-quarantine-local-us-east-1",
              "DOCUMENTS_BUCKET_NAME": "noop-documents-local-us-east-1",
              "S3_ENDPOINT": "http://localhost:9000",
              "MASTER_DYNAMODB_ENDPOINT": "http://localhost:8000",
              "AWS_ACCESS_KEY_ID": "S3RVER",
              "AWS_SECRET_ACCESS_KEY": "S3RVER"
            },
            "command": "npm run build:all &&\nCYPRESS_VERSION=`./node_modules/.bin/cypress --version | awk -F' ' '{print $4; exit}'`\nif [ ! -e \"/root/.cache/Cypress/${CYPRESS_VERSION}/Cypress/Cypress\" ]; then\n  ./node_modules/.bin/cypress install\nfi\nnpx --no-install run-p start:api:ci start:public:ci > /tmp/cypress/cypress-output.txt &\n./wait-until-services.sh\n./wait-until.sh http://localhost:4000/api/swagger\nsleep 5\nnpm run cypress:public\n"
          }
        },
        {
          "store_artifacts": {
            "path": "/root/project/cypress/videos/"
          }
        },
        {
          "store_artifacts": {
            "path": "/tmp/cypress"
          }
        }
      ]
    },
    "deploy": {
      "machine": {
        "docker_layer_caching": true
      },
      "steps": [
        "checkout",
        {
          "run": {
            "name": "Setup Env",
            "command": "ENV=$(./scripts/get-env.sh $CIRCLE_BRANCH)\necho \"export ENV=$ENV\" >> $BASH_ENV\necho \"export CIRCLE_BRANCH=$CIRCLE_BRANCH\" >> $BASH_ENV\necho \"export EFCMS_DOMAIN=$(./scripts/get-efcms-domain.sh $CIRCLE_BRANCH)\" >> $BASH_ENV\necho \"export ZONE_NAME=$(./scripts/get-zone-name.sh $CIRCLE_BRANCH)\" >> $BASH_ENV\necho \"export IRS_SUPERUSER_EMAIL=$(./scripts/get-irs-superuser-email.sh $CIRCLE_BRANCH)\" >> $BASH_ENV\necho \"export DEPLOYING_COLOR=$(./scripts/get-deploying-color.sh $ENV)\" >> $BASH_ENV\necho \"export CURRENT_COLOR=$(./scripts/get-current-color.sh $ENV)\" >> $BASH_ENV\necho \"export BOUNCED_EMAIL_RECIPIENT=$(./scripts/get-bounced-email-recipient.sh $CIRCLE_BRANCH)\" >> $BASH_ENV\n"
          }
        },
        {
          "run": {
            "name": "Build Docker Image",
            "command": "cd web-api/runtimes/puppeteer && ./build.sh && cd ../../..\ncd web-api/runtimes/clamav && ./build.sh && cd ../../..\ndocker build -t efcms -f Dockerfile .\n"
          }
        },
        {
          "run": {
            "name": "Setup Dynamsoft Keys",
            "command": "echo \"export DYNAMSOFT_PRODUCT_KEYS='$(./scripts/get-keys.sh $CIRCLE_BRANCH)'\" >> $BASH_ENV"
          }
        },
        {
          "run": {
            "name": "Setup ES Instance Count",
            "command": "echo \"export ES_INSTANCE_COUNT='$(./scripts/get-es-instance-count.sh $CIRCLE_BRANCH)'\" >> $BASH_ENV"
          }
        },
        {
          "run": {
            "name": "Setup ES Instance Type",
            "command": "echo \"export ES_INSTANCE_TYPE='$(./scripts/get-es-instance-type.sh $CIRCLE_BRANCH)'\" >> $BASH_ENV"
          }
        },
        {
          "run": {
            "name": "Setup Disable Emails",
            "command": "echo \"export DISABLE_EMAILS='$(./scripts/get-disable-emails.sh $CIRCLE_BRANCH)'\" >> $BASH_ENV"
          }
        },
        {
          "run": {
            "name": "Setup ES Volume Size",
            "command": "echo \"export ES_VOLUME_SIZE='$(./scripts/get-es-volume-size.sh $CIRCLE_BRANCH)'\" >> $BASH_ENV"
          }
        },
        {
          "run": {
            "name": "Setup Blue Green Migration If Needed",
            "command": "docker run \\\n  -e \"AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\" \\\n  -e \"AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\" \\\n  -e \"AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}\" \\\n  -e \"EFCMS_DOMAIN=${EFCMS_DOMAIN}\" \\\n  -e \"ZONE_NAME=${ZONE_NAME}\" \\\n  -e \"ENV=${ENV}\" \\\n  --rm efcms /bin/sh -c \"./setup-for-blue-green-migration.sh\"\n"
          }
        },
        {
          "run": {
            "name": "Setup Migrate Flag",
            "command": "echo \"export MIGRATE_FLAG=$(./scripts/get-migrate-flag.sh $ENV)\" >> $BASH_ENV"
          }
        },
        {
          "run": {
            "name": "Setup Destination Table Var",
            "command": "echo \"export DESTINATION_TABLE=$(./scripts/get-destination-table.sh $ENV)\" >> $BASH_ENV"
          }
        },
        {
          "run": {
            "no_output_timeout": "20m",
            "name": "Deploy - Web API - Terraform",
            "command": "docker run \\\n -e \"AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\" \\\n -e \"AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\" \\\n -e \"CIRCLE_BRANCH=${CIRCLE_BRANCH}\" \\\n -e \"COGNITO_SUFFIX=${COGNITO_SUFFIX}\" \\\n -e \"CURRENT_COLOR=${CURRENT_COLOR}\" \\\n -e \"DEPLOYING_COLOR=${DEPLOYING_COLOR}\" \\\n -e \"DESTINATION_TABLE=${DESTINATION_TABLE}\" \\\n -e \"EFCMS_DOMAIN=${EFCMS_DOMAIN}\" \\\n -e \"EMAIL_DMARC_POLICY=${EMAIL_DMARC_POLICY}\" \\\n -e \"ES_INSTANCE_COUNT=${ES_INSTANCE_COUNT}\" \\\n -e \"ES_INSTANCE_TYPE=${ES_INSTANCE_TYPE}\" \\\n -e \"IRS_SUPERUSER_EMAIL=${IRS_SUPERUSER_EMAIL}\" \\\n -e \"MIGRATE_FLAG=${MIGRATE_FLAG}\" \\\n -e \"ZONE_NAME=${ZONE_NAME}\" \\\n -e \"DISABLE_EMAILS=${DISABLE_EMAILS}\" \\\n -e \"ES_VOLUME_SIZE=${ES_VOLUME_SIZE}\" \\\n -e \"BOUNCED_EMAIL_RECIPIENT=${BOUNCED_EMAIL_RECIPIENT}\" \\\n -e \"DYNAMSOFT_URL_OVERRIDE=${DYNAMSOFT_URL_OVERRIDE}\" \\\n --rm efcms /bin/sh -c \"cd web-api/terraform/main && ../bin/deploy-app.sh ${ENV}\"\n"
          }
        },
        {
          "run": {
            "no_output_timeout": "20m",
            "name": "Deploy - Web Client - Terraform",
            "command": "docker run \\\n -e \"AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\" \\\n -e \"AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\" \\\n -e \"EFCMS_DOMAIN=${EFCMS_DOMAIN}\" \\\n -e \"CURRENT_COLOR=${CURRENT_COLOR}\" \\\n -e \"DEPLOYING_COLOR=${DEPLOYING_COLOR}\" \\\n -e \"DYNAMSOFT_PRODUCT_KEYS=${DYNAMSOFT_PRODUCT_KEYS}\" \\\n -e \"DYNAMSOFT_S3_ZIP_PATH=${DYNAMSOFT_S3_ZIP_PATH}\" \\\n -e \"DYNAMSOFT_URL=${DYNAMSOFT_URL}\" \\\n -e \"IS_DYNAMSOFT_ENABLED=${IS_DYNAMSOFT_ENABLED}\" \\\n -e \"ZONE_NAME=${ZONE_NAME}\" \\\n --rm efcms /bin/sh -c \"cd web-client/terraform/main && ../bin/deploy-app.sh $ENV\"\n"
          }
        },
        {
          "run": {
            "name": "Setup Elasticsearch Index Settings",
            "command": "docker run \\\n -e \"AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\" \\\n -e \"AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\" \\\n -e \"EFCMS_DOMAIN=${EFCMS_DOMAIN}\" \\\n -e \"ZONE_NAME=${ZONE_NAME}\" \\\n --rm efcms /bin/sh -c \"./web-api/setup-elasticsearch-index.sh ${ENV}\"\n"
          }
        },
        {
          "run": {
            "name": "Deploy - Web Client - S3",
            "command": "docker run \\\n -e \"ENV=${ENV}\" \\\n -e \"AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\" \\\n -e \"AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\" \\\n -e \"CIRCLE_SHA1=${CIRCLE_SHA1}\" \\\n -e \"CLIENT_STAGE=${CLIENT_STAGE}\" \\\n -e \"COGNITO_SUFFIX=${COGNITO_SUFFIX}\" \\\n -e \"CURRENT_COLOR=${CURRENT_COLOR}\" \\\n -e \"DEPLOYING_COLOR=${DEPLOYING_COLOR}\" \\\n -e \"DYNAMSOFT_URL_OVERRIDE=${DYNAMSOFT_URL_OVERRIDE}\" \\\n -e \"EFCMS_DOMAIN=${EFCMS_DOMAIN}\" \\\n -e \"SESSION_TIMEOUT=${SESSION_TIMEOUT}\" \\\n -e \"SESSION_MODAL_TIMEOUT=${SESSION_MODAL_TIMEOUT}\" \\\n --rm efcms /bin/sh -c \"./web-client/deploy-ui.sh\"\n"
          }
        },
        {
          "run": {
            "name": "Deploy - Public Web Client - S3",
            "command": "docker run \\\n -e \"AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\" \\\n -e \"AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\" \\\n -e \"CIRCLE_SHA1=${CIRCLE_SHA1}\" \\\n -e \"CLIENT_STAGE=${CLIENT_STAGE}\" \\\n -e \"COGNITO_SUFFIX=${COGNITO_SUFFIX}\" \\\n -e \"CURRENT_COLOR=${CURRENT_COLOR}\" \\\n -e \"DEPLOYING_COLOR=${DEPLOYING_COLOR}\" \\\n -e \"EFCMS_DOMAIN=${EFCMS_DOMAIN}\" \\\n -e \"ENV=${ENV}\" \\\n -e \"STATUSPAGE_DNS_RECORD=${STATUSPAGE_DNS_RECORD}\" \\\n --rm efcms /bin/sh -c \"./web-client/deploy-public.sh\"\n"
          }
        },
        {
          "run": {
            "name": "Deploy - Web API - Cognito Customize",
            "command": "docker run \\\n -e \"AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\" \\\n -e \"AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\" \\\n --rm efcms /bin/sh -c \"cd web-api && ./setup-cognito-ui.sh ${ENV}\"\n"
          }
        },
        {
          "run": {
            "name": "Deploy - Web API - Smoke Tests - us-east-1",
            "command": "if [ \"${CIRCLE_BRANCH}\" == \"develop\" ] || [ \"${CIRCLE_BRANCH}\" == \"experimental1\" ] || [ \"${CIRCLE_BRANCH}\" == \"experimental2\" ] || [ \"${CIRCLE_BRANCH}\" == \"experimental3\" ] || [ \"${CIRCLE_BRANCH}\" == \"experimental4\" ] || [ \"${CIRCLE_BRANCH}\" == \"experimental5\" ] || [ \"${CIRCLE_BRANCH}\" == \"staging\" ] || [ \"${CIRCLE_BRANCH}\" == \"irs\" ]; then\n  docker run \\\n   -e \"AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\" \\\n   -e \"AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\" \\\n   -e \"CURRENT_COLOR=${CURRENT_COLOR}\" \\\n   -e \"DEFAULT_ACCOUNT_PASS=${DEFAULT_ACCOUNT_PASS}\" \\\n   -e \"DEPLOYING_COLOR=${DEPLOYING_COLOR}\" \\\n   --rm efcms /bin/sh -c \"cd web-api && node smoke-tests.js ${ENV} us-east-1 ${DEPLOYING_COLOR} ${DEFAULT_ACCOUNT_PASS}\"\nelse\n  echo \"skipping…\"\nfi\n"
          }
        },
        {
          "run": {
            "name": "Deploy - Web API - Smoke Tests - us-west-1",
            "command": "if [ \"${CIRCLE_BRANCH}\" == \"develop\" ] || [ \"${CIRCLE_BRANCH}\" == \"experimental1\" ] || [ \"${CIRCLE_BRANCH}\" == \"experimental2\" ] || [ \"${CIRCLE_BRANCH}\" == \"experimental3\" ] || [ \"${CIRCLE_BRANCH}\" == \"experimental4\" ] || [ \"${CIRCLE_BRANCH}\" == \"experimental5\" ] || [ \"${CIRCLE_BRANCH}\" == \"staging\" ] || [ \"${CIRCLE_BRANCH}\" == \"irs\" ]; then\n  docker run \\\n   -e \"AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\" \\\n   -e \"AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\" \\\n   -e \"CURRENT_COLOR=${CURRENT_COLOR}\" \\\n   -e \"DEFAULT_ACCOUNT_PASS=${DEFAULT_ACCOUNT_PASS}\" \\\n   -e \"DEPLOYING_COLOR=${DEPLOYING_COLOR}\" \\\n   --rm efcms /bin/sh -c \"cd web-api && node smoke-tests.js ${ENV} us-west-1 ${DEPLOYING_COLOR} ${DEFAULT_ACCOUNT_PASS}\"\nelse\n  echo \"skipping…\"\nfi\n"
          }
        },
        {
          "run": {
            "name": "Deploy - Authorizer Smoke Tests",
            "command": "docker run \\\n -e \"AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\" \\\n -e \"AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\" \\\n -e \"EFCMS_DOMAIN=${EFCMS_DOMAIN}\" \\\n -e \"CURRENT_COLOR=${CURRENT_COLOR}\" \\\n -e \"DEPLOYING_COLOR=${DEPLOYING_COLOR}\" \\\n --rm efcms /bin/sh -c \"npm run verify-authorizers -- ${ENV}\"\n"
          }
        },
        {
          "run": {
            "name": "Deploy - Verify Private S3 Buckets",
            "command": "docker run \\\n -e \"AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\" \\\n -e \"AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\" \\\n -e \"EFCMS_DOMAIN=${EFCMS_DOMAIN}\" \\\n --rm efcms /bin/sh -c \"npm run verify-private-s3-buckets -- ${ENV}\"\n"
          }
        },
        {
          "run": {
            "name": "Deploy - Verify Private Elasticsearch",
            "command": "docker run \\\n -e \"AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\" \\\n -e \"AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\" \\\n -e \"EFCMS_DOMAIN=${EFCMS_DOMAIN}\" \\\n --rm efcms /bin/sh -c \"npm run verify-private-elasticsearch -- ${ENV}\"\n"
          }
        },
        {
          "store_artifacts": {
            "path": "/home/app/cypress-smoketests/videos/"
          }
        },
        {
          "run": {
            "name": "Deploy - Pending Color Switch",
            "command": "npm run pending-color-switch"
          }
        }
      ]
    },
    "migrate": {
      "machine": {
        "docker_layer_caching": true
      },
      "steps": [
        "checkout",
        {
          "run": {
            "name": "Setup Env",
            "command": "ENV=$(./scripts/get-env.sh $CIRCLE_BRANCH)\necho \"export ENV=$ENV\" >> $BASH_ENV\nEFCMS_DOMAIN=$(./scripts/get-efcms-domain.sh $CIRCLE_BRANCH)\necho \"export EFCMS_DOMAIN=$EFCMS_DOMAIN\" >> $BASH_ENV\necho \"export MIGRATE_FLAG=$(./scripts/get-migrate-flag.sh $ENV)\" >> $BASH_ENV\necho \"export DEPLOYING_COLOR=$(./scripts/get-deploying-color.sh $ENV)\" >> $BASH_ENV\necho \"export DESTINATION_TABLE=$(./scripts/get-destination-table.sh $ENV)\" >> $BASH_ENV\necho \"export SOURCE_TABLE=$(./scripts/get-source-table.sh $ENV)\" >> $BASH_ENV\necho \"export ZONE_NAME=$(./scripts/get-zone-name.sh $CIRCLE_BRANCH)\" >> $BASH_ENV\necho \"export DOCUMENTS_BUCKET_NAME=$(./scripts/get-documents-bucket-name.sh $EFCMS_DOMAIN $ENV)\" >> $BASH_ENV\n"
          }
        },
        {
          "run": {
            "name": "Build Docker Image",
            "command": "docker build -t efcms -f Dockerfile .\n"
          }
        },
        {
          "run": {
            "name": "Setup Migration Infrastructure",
            "command": "if [ \"$MIGRATE_FLAG\" == \"true\" ]; then\n  docker run \\\n   -e \"AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\" \\\n   -e \"AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\" \\\n   -e \"DESTINATION_TABLE=${DESTINATION_TABLE}\" \\\n   -e \"EFCMS_DOMAIN=${EFCMS_DOMAIN}\" \\\n   -e \"SOURCE_TABLE=${SOURCE_TABLE}\" \\\n   -e \"ZONE_NAME=${ZONE_NAME}\" \\\n   -e \"DOCUMENTS_BUCKET_NAME=${DOCUMENTS_BUCKET_NAME}\" \\\n   --rm efcms /bin/sh -c \"npm run deploy:migration -- ${ENV}\"\nfi\n"
          }
        },
        {
          "run": {
            "name": "Disable Destination Table Stream",
            "command": "if [ \"$MIGRATE_FLAG\" == \"true\" ]; then\n  docker run \\\n   -e \"AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\" \\\n   -e \"AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}\" \\\n   -e \"AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\" \\\n   -e \"DEPLOYING_COLOR=${DEPLOYING_COLOR}\" \\\n   -e \"ENV=${ENV}\" \\\n   --rm efcms /bin/sh -c \"./web-api/disable-deploying-dynamo-stream-trigger.sh\"\nfi\n"
          }
        },
        {
          "run": {
            "name": "Run Migration",
            "command": "if [ \"$MIGRATE_FLAG\" == \"true\" ]; then\n  docker run \\\n   -e \"AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\" \\\n   -e \"AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\" \\\n   -e \"AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}\" \\\n   -e \"DESTINATION_TABLE=${DESTINATION_TABLE}\" \\\n   -e \"EFCMS_DOMAIN=${EFCMS_DOMAIN}\" \\\n   -e \"SOURCE_TABLE=${SOURCE_TABLE}\" \\\n   -e \"STREAM_ARN=${STREAM_ARN}\" \\\n   -e \"ZONE_NAME=${ZONE_NAME}\" \\\n   -e \"DOCUMENTS_BUCKET_NAME=${DOCUMENTS_BUCKET_NAME}\" \\\n   --rm efcms /bin/sh -c \"npm run start:migration -- ${ENV}\"\nfi\n"
          }
        },
        {
          "run": {
            "name": "Wait for SQS Queue to Empty",
            "no_output_timeout": "5h",
            "command": "if [ \"$MIGRATE_FLAG\" == \"true\" ]; then\n  docker run \\\n   -e \"AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\" \\\n   -e \"AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}\" \\\n   -e \"AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\" \\\n   -e \"ENV=${ENV}\" \\\n   --rm efcms /bin/sh -c \"./wait-for-migration-to-finish.sh\"\nfi\n"
          }
        },
        {
          "run": {
            "name": "Track successful migrations",
            "command": "if [ \"$MIGRATE_FLAG\" == \"true\" ]; then\n  docker run \\\n    -e \"AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\" \\\n    -e \"AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}\" \\\n    -e \"AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\" \\\n    -e \"ENV=${ENV}\" \\\n    --rm efcms /bin/sh -c \"node ./web-api/track-successful-migrations.js\"\nfi\n"
          }
        },
        {
          "run": {
            "name": "Enable Destination Table Stream",
            "command": "if [ \"$MIGRATE_FLAG\" == \"true\" ]; then\n  docker run \\\n    -e \"AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}\" \\\n    -e \"AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID}\" \\\n    -e \"AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}\" \\\n    -e \"DEPLOYING_COLOR=${DEPLOYING_COLOR}\" \\\n    -e \"ENV=${ENV}\" \\\n    --rm efcms /bin/sh -c \"./web-api/enable-deploying-dynamo-stream-trigger.sh\"\nfi\n"
          }
        }
      ]
    },
    "smoketests": {
      "docker": [
        {
          "image": "$AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/ef-cms-us-east-1:latest",
          "aws_auth": {
            "aws_access_key_id": "$AWS_ACCESS_KEY_ID",
            "aws_secret_access_key": "$AWS_SECRET_ACCESS_KEY"
          }
        }
      ],
      "resource_class": "large",
      "steps": [
        "checkout",
        {
          "run": {
            "name": "NPM - Install",
            "command": "npm set progress=false\nnpm ci\nnpm rebuild\n"
          }
        },
        {
          "run": {
            "name": "Create Cypress Artifacts Directory",
            "command": "mkdir /tmp/cypress"
          }
        },
        {
          "run": {
            "name": "Setup Env",
            "command": "ENV=$(./scripts/get-env.sh $CIRCLE_BRANCH)\necho \"export ENV=$ENV\" >> $BASH_ENV\necho \"export EFCMS_DOMAIN=$(./scripts/get-efcms-domain.sh $CIRCLE_BRANCH)\" >> $BASH_ENV\necho \"export ZONE_NAME=$(./scripts/get-zone-name.sh $CIRCLE_BRANCH)\" >> $BASH_ENV\necho \"export DEPLOYING_COLOR=$(./scripts/get-deploying-color.sh $ENV)\" >> $BASH_ENV\necho \"export DISABLE_EMAILS='$(./scripts/get-disable-emails.sh $CIRCLE_BRANCH)'\" >> $BASH_ENV\n"
          }
        },
        {
          "run": {
            "name": "Cypress Smoke Tests",
            "command": "npm run cypress:smoketests"
          }
        },
        {
          "run": {
            "name": "Pa11y Smoke Tests",
            "command": "npm run test:pa11y:smoketests"
          }
        },
        {
          "store_artifacts": {
            "path": "/root/project/cypress-smoketests/videos/"
          }
        }
      ]
    },
    "smoketests-readonly": {
      "docker": [
        {
          "image": "$AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/ef-cms-us-east-1:latest",
          "aws_auth": {
            "aws_access_key_id": "$AWS_ACCESS_KEY_ID",
            "aws_secret_access_key": "$AWS_SECRET_ACCESS_KEY"
          }
        }
      ],
      "resource_class": "large",
      "steps": [
        "checkout",
        {
          "run": {
            "name": "NPM - Install",
            "command": "npm set progress=false\nnpm ci\nnpm rebuild\n"
          }
        },
        {
          "run": {
            "name": "Create Cypress Artifacts Directory",
            "command": "mkdir /tmp/cypress"
          }
        },
        {
          "run": {
            "name": "Setup Env",
            "command": "ENV=$(./scripts/get-env.sh $CIRCLE_BRANCH)\necho \"export ENV=$ENV\" >> $BASH_ENV\necho \"export EFCMS_DOMAIN=$(./scripts/get-efcms-domain.sh $CIRCLE_BRANCH)\" >> $BASH_ENV\necho \"export ZONE_NAME=$(./scripts/get-zone-name.sh $CIRCLE_BRANCH)\" >> $BASH_ENV\necho \"export DEPLOYING_COLOR=$(./scripts/get-deploying-color.sh $ENV)\" >> $BASH_ENV\necho \"export DISABLE_EMAILS='$(./scripts/get-disable-emails.sh $CIRCLE_BRANCH)'\" >> $BASH_ENV\necho \"export DEFAULT_ACCOUNT_PASS=$DEFAULT_ACCOUNT_PASS\" >> $BASH_ENV\necho \"export USTC_ADMIN_PASS=$USTC_ADMIN_PASS\" >> $BASH_ENV\necho \"export USTC_ADMIN_USER=$USTC_ADMIN_USER\" >> $BASH_ENV\n"
          }
        },
        {
          "run": {
            "name": "Create and Enable Test User",
            "command": "node ./scripts/create-and-enable-smoketest-user.js"
          }
        },
        {
          "run": {
            "name": "Cypress Readonly Smoke Tests",
            "command": "set +e\nnpm run cypress:readonly\necho \"export READONLY_SMOKETESTS_RESULT=$?\" >> $BASH_ENV\nset -e\n"
          }
        },
        {
          "run": {
            "name": "Disable Test User",
            "command": "node ./scripts/disable-smoketest-user.js"
          }
        },
        {
          "run": {
            "name": "Kill Build if Smoketests Failed",
            "command": "./scripts/kill-circle-build.sh"
          }
        },
        {
          "run": {
            "name": "Cypress Public Readonly Smoke Tests",
            "command": "npm run cypress:readonly-public"
          }
        },
        {
          "store_artifacts": {
            "path": "/root/project/cypress-smoketests-readonly/videos/"
          }
        }
      ]
    },
    "switch-colors": {
      "docker": [
        {
          "image": "$AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/ef-cms-us-east-1:latest",
          "aws_auth": {
            "aws_access_key_id": "$AWS_ACCESS_KEY_ID",
            "aws_secret_access_key": "$AWS_SECRET_ACCESS_KEY"
          }
        }
      ],
      "resource_class": "large",
      "steps": [
        "checkout",
        {
          "run": {
            "name": "NPM - Install",
            "command": "npm set progress=false\nnpm ci\nnpm rebuild\n"
          }
        },
        {
          "run": {
            "name": "Create Cypress Artifacts Directory",
            "command": "mkdir /tmp/cypress"
          }
        },
        {
          "run": {
            "name": "Setup Env",
            "command": "ENV=$(./scripts/get-env.sh $CIRCLE_BRANCH)\necho \"export ENV=$ENV\" >> $BASH_ENV\necho \"export MIGRATE_FLAG=$(./scripts/get-migrate-flag.sh $ENV)\" >> $BASH_ENV\necho \"export EFCMS_DOMAIN=$(./scripts/get-efcms-domain.sh $CIRCLE_BRANCH)\" >> $BASH_ENV\necho \"export ZONE_NAME=$(./scripts/get-zone-name.sh $CIRCLE_BRANCH)\" >> $BASH_ENV\necho \"export DEPLOYING_COLOR=$(./scripts/get-deploying-color.sh $ENV)\" >> $BASH_ENV\necho \"export CURRENT_COLOR=$(./scripts/get-current-color.sh $ENV)\" >> $BASH_ENV\necho \"export AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID >> $BASH_ENV\"\n"
          }
        },
        {
          "run": {
            "name": "Switch Colors",
            "command": "npm run switch-colors"
          }
        }
      ]
    }
  },
  "build-and-deploy-defaults": {
    "filters": {
      "branches": {
        "ignore": [
          "develop",
          "prod",
          "migration"
        ]
      }
    }
  },
  "build-and-deploy-without-smoketests-defaults": {
    "filters": {
      "branches": {
        "only": [
          "migration"
        ]
      }
    }
  },
  "build-and-deploy-with-context-defaults": {
    "context": "efcms-<< pipeline.git.branch >>",
    "filters": {
      "branches": {
        "only": [
          "prod"
        ]
      }
    }
  },
  "workflows": {
    "version": 2,
    "hourly": {
      "jobs": [
        "build-client-integration",
        "e2e-pa11y",
        "e2e-pa11y-public",
        "e2e-cypress",
        "e2e-cypress-smoketests-local",
        "e2e-cypress-public",
        {
          "deploy": {
            "requires": [
              "build-client-integration",
              "e2e-pa11y",
              "e2e-pa11y-public",
              "e2e-cypress",
              "e2e-cypress-smoketests-local",
              "e2e-cypress-public"
            ]
          }
        },
        {
          "migrate": {
            "requires": [
              "deploy"
            ]
          }
        },
        {
          "smoketests": {
            "requires": [
              "migrate"
            ]
          }
        },
        {
          "smoketests-readonly": {
            "requires": [
              "smoketests"
            ]
          }
        },
        {
          "switch-colors": {
            "requires": [
              "smoketests-readonly"
            ]
          }
        }
      ],
      "triggers": [
        {
          "schedule": {
            "cron": "0 13-22 * * 1-5",
            "filters": {
              "branches": {
                "only": [
                  "develop"
                ]
              }
            }
          }
        }
      ]
    },
    "build-and-deploy": {
      "jobs": [
        {
          "build-client-integration": {
            "filters": {
              "branches": {
                "ignore": [
                  "develop",
                  "prod",
                  "migration"
                ]
              }
            }
          }
        },
        {
          "e2e-pa11y": {
            "filters": {
              "branches": {
                "ignore": [
                  "develop",
                  "prod",
                  "migration"
                ]
              }
            }
          }
        },
        {
          "e2e-pa11y-public": {
            "filters": {
              "branches": {
                "ignore": [
                  "develop",
                  "prod",
                  "migration"
                ]
              }
            }
          }
        },
        {
          "e2e-cypress": {
            "filters": {
              "branches": {
                "ignore": [
                  "develop",
                  "prod",
                  "migration"
                ]
              }
            }
          }
        },
        {
          "e2e-cypress-smoketests-local": {
            "filters": {
              "branches": {
                "ignore": [
                  "develop",
                  "prod",
                  "migration"
                ]
              }
            }
          }
        },
        {
          "e2e-cypress-public": {
            "filters": {
              "branches": {
                "ignore": [
                  "develop",
                  "prod",
                  "migration"
                ]
              }
            }
          }
        },
        {
          "deploy": null,
          "requires": [
            "build-client-integration",
            "e2e-pa11y",
            "e2e-pa11y-public",
            "e2e-cypress",
            "e2e-cypress-smoketests-local",
            "e2e-cypress-public"
          ],
          "filters": {
            "branches": {
              "only": [
                "irs",
                "staging",
                "test",
                "master",
                "experimental1",
                "experimental2",
                "experimental3",
                "experimental4",
                "experimental5",
                "dawson"
              ]
            }
          }
        },
        {
          "migrate": {
            "requires": [
              "deploy"
            ],
            "filters": {
              "branches": {
                "only": [
                  "irs",
                  "staging",
                  "test",
                  "experimental1",
                  "experimental2",
                  "experimental3",
                  "experimental4",
                  "experimental5"
                ]
              }
            }
          }
        },
        {
          "smoketests": {
            "requires": [
              "migrate"
            ],
            "filters": {
              "branches": {
                "only": [
                  "irs",
                  "staging",
                  "test",
                  "experimental1",
                  "experimental2",
                  "experimental3",
                  "experimental4",
                  "experimental5"
                ]
              }
            }
          }
        },
        {
          "smoketests-readonly": {
            "requires": [
              "smoketests"
            ],
            "filters": {
              "branches": {
                "only": [
                  "irs",
                  "staging",
                  "test",
                  "experimental1",
                  "experimental2",
                  "experimental3",
                  "experimental4",
                  "experimental5"
                ]
              }
            }
          }
        },
        {
          "switch-colors": {
            "requires": [
              "smoketests-readonly"
            ],
            "filters": {
              "branches": {
                "only": [
                  "irs",
                  "staging",
                  "test",
                  "master",
                  "experimental1",
                  "experimental2",
                  "experimental3",
                  "experimental4",
                  "experimental5",
                  "dawson"
                ]
              }
            }
          }
        }
      ]
    },
    "build-and-deploy-without-smoketests": {
      "jobs": [
        {
          "build-client-integration": {
            "filters": {
              "branches": {
                "only": [
                  "migration"
                ]
              }
            }
          }
        },
        {
          "e2e-pa11y": {
            "filters": {
              "branches": {
                "only": [
                  "migration"
                ]
              }
            }
          }
        },
        {
          "e2e-pa11y-public": {
            "filters": {
              "branches": {
                "only": [
                  "migration"
                ]
              }
            }
          }
        },
        {
          "e2e-cypress": {
            "filters": {
              "branches": {
                "only": [
                  "migration"
                ]
              }
            }
          }
        },
        {
          "e2e-cypress-smoketests-local": {
            "filters": {
              "branches": {
                "only": [
                  "migration"
                ]
              }
            }
          }
        },
        {
          "e2e-cypress-public": {
            "filters": {
              "branches": {
                "only": [
                  "migration"
                ]
              }
            }
          }
        },
        {
          "deploy": {
            "filters": {
              "branches": {
                "only": [
                  "migration"
                ]
              }
            },
            "requires": [
              "build-client-integration",
              "e2e-pa11y",
              "e2e-pa11y-public",
              "e2e-cypress",
              "e2e-cypress-smoketests-local",
              "e2e-cypress-public"
            ]
          }
        },
        {
          "migrate": {
            "filters": {
              "branches": {
                "only": [
                  "migration"
                ]
              }
            },
            "requires": [
              "deploy"
            ]
          }
        },
        {
          "switch-colors": {
            "filters": {
              "branches": {
                "only": [
                  "migration"
                ]
              }
            },
            "requires": [
              "migrate"
            ]
          }
        }
      ]
    },
    "build-and-deploy-with-context": {
      "jobs": [
        {
          "build-client-integration": {
            "context": "efcms-<< pipeline.git.branch >>",
            "filters": {
              "branches": {
                "only": [
                  "prod"
                ]
              }
            }
          }
        },
        {
          "e2e-pa11y": {
            "context": "efcms-<< pipeline.git.branch >>",
            "filters": {
              "branches": {
                "only": [
                  "prod"
                ]
              }
            }
          }
        },
        {
          "e2e-pa11y-public": {
            "context": "efcms-<< pipeline.git.branch >>",
            "filters": {
              "branches": {
                "only": [
                  "prod"
                ]
              }
            }
          }
        },
        {
          "e2e-cypress": {
            "context": "efcms-<< pipeline.git.branch >>",
            "filters": {
              "branches": {
                "only": [
                  "prod"
                ]
              }
            }
          }
        },
        {
          "e2e-cypress-smoketests-local": {
            "context": "efcms-<< pipeline.git.branch >>",
            "filters": {
              "branches": {
                "only": [
                  "prod"
                ]
              }
            }
          }
        },
        {
          "e2e-cypress-public": {
            "context": "efcms-<< pipeline.git.branch >>",
            "filters": {
              "branches": {
                "only": [
                  "prod"
                ]
              }
            }
          }
        },
        {
          "deploy": {
            "context": "efcms-<< pipeline.git.branch >>",
            "filters": {
              "branches": {
                "only": [
                  "prod"
                ]
              }
            },
            "requires": [
              "build-client-integration",
              "e2e-pa11y",
              "e2e-pa11y-public",
              "e2e-cypress",
              "e2e-cypress-smoketests-local",
              "e2e-cypress-public"
            ]
          }
        },
        {
          "migrate": {
            "context": "efcms-<< pipeline.git.branch >>",
            "filters": {
              "branches": {
                "only": [
                  "prod"
                ]
              }
            },
            "requires": [
              "deploy"
            ]
          }
        },
        {
          "smoketests-readonly": {
            "context": "efcms-<< pipeline.git.branch >>",
            "filters": {
              "branches": {
                "only": [
                  "prod"
                ]
              }
            },
            "requires": [
              "migrate"
            ]
          }
        }
      ]
    }
  }
}